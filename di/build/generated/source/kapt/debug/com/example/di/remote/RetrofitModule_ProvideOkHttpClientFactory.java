// Generated by Dagger (https://dagger.dev).
package com.example.di.remote;

import com.example.data.interceptor.AuthorizationInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RetrofitModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  private final Provider<AuthorizationInterceptor> authorizationInterceptorProvider;

  public RetrofitModule_ProvideOkHttpClientFactory(
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider,
      Provider<AuthorizationInterceptor> authorizationInterceptorProvider) {
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
    this.authorizationInterceptorProvider = authorizationInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(httpLoggingInterceptorProvider.get(), authorizationInterceptorProvider.get());
  }

  public static RetrofitModule_ProvideOkHttpClientFactory create(
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider,
      Provider<AuthorizationInterceptor> authorizationInterceptorProvider) {
    return new RetrofitModule_ProvideOkHttpClientFactory(httpLoggingInterceptorProvider, authorizationInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient(HttpLoggingInterceptor httpLoggingInterceptor,
      AuthorizationInterceptor authorizationInterceptor) {
    return Preconditions.checkNotNullFromProvides(RetrofitModule.INSTANCE.provideOkHttpClient(httpLoggingInterceptor, authorizationInterceptor));
  }
}
